// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Survello.Database;

namespace Survello.Database.Migrations
{
    [DbContext(typeof(SurvelloContext))]
    [Migration("20200608101327_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("52d02f62-14ac-4152-872c-08d7eb74f484"),
                            RoleId = new Guid("0989cb07-226e-430d-9173-87ee97472f6a")
                        },
                        new
                        {
                            UserId = new Guid("22a2d89d-ee6e-4c94-e490-08d7eb6bae70"),
                            RoleId = new Guid("0989cb07-226e-430d-9173-87ee97472f6a")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Survello.Models.Entites.DocumentAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CorelationToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentQuestionId");

                    b.ToTable("DocumentAnswers");
                });

            modelBuilder.Entity("Survello.Models.Entites.DocumentQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileNumberLimit")
                        .HasColumnType("int");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("DocumentQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("078b4521-5443-4731-97f5-3782a007d19b"),
                            Description = "Write a C# method to total all the even numbers in an array of ints.",
                            FileNumberLimit = 2,
                            FileSize = 1,
                            FormId = new Guid("433ae596-a2d7-4edd-9ca6-725e38d81d20"),
                            IsDeleted = false,
                            IsRequired = true,
                            QuestionNumber = 3
                        },
                        new
                        {
                            Id = new Guid("45a5dd1e-a553-4181-b121-0b05ad3d2f0c"),
                            Description = "Write a C# method to total all the even numbers in an array of ints.",
                            FileNumberLimit = 3,
                            FileSize = 1,
                            FormId = new Guid("52810e25-ff5a-4a0b-a3bb-149966936603"),
                            IsDeleted = false,
                            IsRequired = true,
                            QuestionNumber = 2
                        },
                        new
                        {
                            Id = new Guid("29317811-fc8b-4023-b7ba-6ec36b0493cb"),
                            Description = "Write a C# method to total all the even numbers in an array of ints.",
                            FileNumberLimit = 1,
                            FileSize = 1,
                            FormId = new Guid("54e3ce66-3f54-4887-a824-a8b5f3e2753d"),
                            IsDeleted = false,
                            IsRequired = true,
                            QuestionNumber = 3
                        },
                        new
                        {
                            Id = new Guid("1ff9a8cf-4c6e-4ad3-ba1f-ea5d9f03e6dd"),
                            Description = "Write a C# method to total all the even numbers in an array of ints.",
                            FileNumberLimit = 4,
                            FileSize = 1,
                            FormId = new Guid("03270740-b76c-4947-a9f6-8505c59a6af3"),
                            IsDeleted = false,
                            IsRequired = true,
                            QuestionNumber = 4
                        },
                        new
                        {
                            Id = new Guid("9da82655-2106-4e77-a42a-97c64bbe07ae"),
                            Description = "Write a C# method to total all the even numbers in an array of ints.",
                            FileNumberLimit = 5,
                            FileSize = 1,
                            FormId = new Guid("19fe0d98-01a7-4f43-8fd5-c83e22660394"),
                            IsDeleted = false,
                            IsRequired = true,
                            QuestionNumber = 1
                        },
                        new
                        {
                            Id = new Guid("c576c898-95b8-4758-a7ef-11533c8cca48"),
                            Description = "Write a C# method to total all the even numbers in an array of ints.",
                            FileNumberLimit = 7,
                            FileSize = 1,
                            FormId = new Guid("ec3164af-7883-4df8-8db9-ebaf35160a52"),
                            IsDeleted = false,
                            IsRequired = true,
                            QuestionNumber = 3
                        });
                });

            modelBuilder.Entity("Survello.Models.Entites.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfFilledForms")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Forms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("433ae596-a2d7-4edd-9ca6-725e38d81d20"),
                            CreatedOn = new DateTime(2020, 6, 8, 13, 13, 24, 588, DateTimeKind.Local).AddTicks(9860),
                            Description = "In this form you will find basic questions about c#.",
                            IsDeleted = false,
                            NumberOfFilledForms = 0,
                            Title = "Basic .Net questions",
                            UserId = new Guid("22a2d89d-ee6e-4c94-e490-08d7eb6bae70")
                        },
                        new
                        {
                            Id = new Guid("52810e25-ff5a-4a0b-a3bb-149966936603"),
                            CreatedOn = new DateTime(2020, 6, 8, 13, 13, 24, 605, DateTimeKind.Local).AddTicks(3798),
                            Description = "This quiz will walk you through some of the most common questions asked about c# during interviews.",
                            IsDeleted = false,
                            NumberOfFilledForms = 0,
                            Title = "Quiz of commonly asked questions",
                            UserId = new Guid("22a2d89d-ee6e-4c94-e490-08d7eb6bae70")
                        },
                        new
                        {
                            Id = new Guid("54e3ce66-3f54-4887-a824-a8b5f3e2753d"),
                            CreatedOn = new DateTime(2020, 6, 8, 13, 13, 24, 605, DateTimeKind.Local).AddTicks(4270),
                            Description = "This quiz will walk you through some of the most common questions asked about c# during interviews.",
                            IsDeleted = false,
                            NumberOfFilledForms = 0,
                            Title = ".Net Interview questions",
                            UserId = new Guid("22a2d89d-ee6e-4c94-e490-08d7eb6bae70")
                        },
                        new
                        {
                            Id = new Guid("03270740-b76c-4947-a9f6-8505c59a6af3"),
                            CreatedOn = new DateTime(2020, 6, 8, 13, 13, 24, 605, DateTimeKind.Local).AddTicks(4362),
                            Description = "A selection of commonly asked questions during interviews.",
                            IsDeleted = false,
                            NumberOfFilledForms = 0,
                            Title = ".Net Advanced questions",
                            UserId = new Guid("22a2d89d-ee6e-4c94-e490-08d7eb6bae70")
                        },
                        new
                        {
                            Id = new Guid("19fe0d98-01a7-4f43-8fd5-c83e22660394"),
                            CreatedOn = new DateTime(2020, 6, 8, 13, 13, 24, 605, DateTimeKind.Local).AddTicks(4422),
                            Description = "Questions frequently asked during interviews for junior developer",
                            IsDeleted = false,
                            NumberOfFilledForms = 0,
                            Title = "Junior dev interview questions",
                            UserId = new Guid("22a2d89d-ee6e-4c94-e490-08d7eb6bae70")
                        },
                        new
                        {
                            Id = new Guid("ec3164af-7883-4df8-8db9-ebaf35160a52"),
                            CreatedOn = new DateTime(2020, 6, 8, 13, 13, 24, 605, DateTimeKind.Local).AddTicks(4510),
                            Description = "A collection of advanced questions",
                            IsDeleted = false,
                            NumberOfFilledForms = 0,
                            Title = "A collection of advanced questions",
                            UserId = new Guid("22a2d89d-ee6e-4c94-e490-08d7eb6bae70")
                        });
                });

            modelBuilder.Entity("Survello.Models.Entites.MultipleChoiceAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CorelationToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MultipleChoiceQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MultipleChoiceQuestionId");

                    b.ToTable("MultipleChoiceAnswers");
                });

            modelBuilder.Entity("Survello.Models.Entites.MultipleChoiceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MultipleChoiceQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MultipleChoiceQuestionId");

                    b.ToTable("MultipleChoiceOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74277088-7d1b-4429-98f8-39fe98815267"),
                            MultipleChoiceQuestionId = new Guid("e8e5a052-e9a9-4093-8b70-282016042413"),
                            Option = "This"
                        },
                        new
                        {
                            Id = new Guid("c193852b-b991-4f5a-9714-4ac795e1d9c6"),
                            MultipleChoiceQuestionId = new Guid("e8e5a052-e9a9-4093-8b70-282016042413"),
                            Option = "static"
                        },
                        new
                        {
                            Id = new Guid("e55253da-c62a-42a0-9376-6f94b6022961"),
                            MultipleChoiceQuestionId = new Guid("e8e5a052-e9a9-4093-8b70-282016042413"),
                            Option = "extend"
                        },
                        new
                        {
                            Id = new Guid("f4945cd1-77f2-45c2-b2d4-05a5ca211a77"),
                            MultipleChoiceQuestionId = new Guid("e8e5a052-e9a9-4093-8b70-282016042413"),
                            Option = "base"
                        },
                        new
                        {
                            Id = new Guid("01ae9bc9-a4b6-4e1e-98a8-f1c0c9b83f81"),
                            MultipleChoiceQuestionId = new Guid("ae0d5c2a-8f4e-4827-bf5a-c0207058f073"),
                            Option = "static"
                        },
                        new
                        {
                            Id = new Guid("ef72106e-1caf-4f12-b52d-7398fcb4173c"),
                            MultipleChoiceQuestionId = new Guid("ae0d5c2a-8f4e-4827-bf5a-c0207058f073"),
                            Option = "protected"
                        },
                        new
                        {
                            Id = new Guid("4830247a-7b4a-4a80-8bdb-86f821997b67"),
                            MultipleChoiceQuestionId = new Guid("ae0d5c2a-8f4e-4827-bf5a-c0207058f073"),
                            Option = "private"
                        },
                        new
                        {
                            Id = new Guid("89054196-2c4a-4f85-a1cd-6a56476078bb"),
                            MultipleChoiceQuestionId = new Guid("ae0d5c2a-8f4e-4827-bf5a-c0207058f073"),
                            Option = "shared"
                        },
                        new
                        {
                            Id = new Guid("db3fda74-04f4-4a37-afd1-364dfe8d9543"),
                            MultipleChoiceQuestionId = new Guid("3b4f9812-6117-4e58-903f-490991e680b2"),
                            Option = "interface"
                        },
                        new
                        {
                            Id = new Guid("cd3898da-94de-4d93-a573-213768940188"),
                            MultipleChoiceQuestionId = new Guid("3b4f9812-6117-4e58-903f-490991e680b2"),
                            Option = "Interface"
                        },
                        new
                        {
                            Id = new Guid("df4405a4-febe-4944-ac56-2aa7a542795b"),
                            MultipleChoiceQuestionId = new Guid("3b4f9812-6117-4e58-903f-490991e680b2"),
                            Option = "intf"
                        },
                        new
                        {
                            Id = new Guid("8fd76353-a1a1-4f93-ad4b-1ca98a1b85b2"),
                            MultipleChoiceQuestionId = new Guid("3b4f9812-6117-4e58-903f-490991e680b2"),
                            Option = "Intf"
                        },
                        new
                        {
                            Id = new Guid("3f6d4ee6-92de-488c-aa64-faa6e4603e6e"),
                            MultipleChoiceQuestionId = new Guid("0f94f73d-67dc-4c79-b09c-89af701ffeda"),
                            Option = "public static op(arglist) { }"
                        },
                        new
                        {
                            Id = new Guid("afe90d07-58bd-4e1b-b26f-5d9f0ce383e9"),
                            MultipleChoiceQuestionId = new Guid("0f94f73d-67dc-4c79-b09c-89af701ffeda"),
                            Option = "public static retval op(arglist) { }"
                        },
                        new
                        {
                            Id = new Guid("6a1b83e6-ab90-482f-90d2-643443d3b3d6"),
                            MultipleChoiceQuestionId = new Guid("0f94f73d-67dc-4c79-b09c-89af701ffeda"),
                            Option = "public static retval operator op(arglist) { }"
                        },
                        new
                        {
                            Id = new Guid("016951d6-ce70-490d-b970-dda0bfaeba94"),
                            MultipleChoiceQuestionId = new Guid("0f94f73d-67dc-4c79-b09c-89af701ffeda"),
                            Option = "All of the mentioned"
                        },
                        new
                        {
                            Id = new Guid("54bd185e-d4a5-4111-b8cd-d0f673888e36"),
                            MultipleChoiceQuestionId = new Guid("30331739-eb68-451c-8b0a-ed5ac05e8227"),
                            Option = "try"
                        },
                        new
                        {
                            Id = new Guid("b02fe2be-d595-4f7c-823d-3847ce7ffd19"),
                            MultipleChoiceQuestionId = new Guid("30331739-eb68-451c-8b0a-ed5ac05e8227"),
                            Option = "finally"
                        },
                        new
                        {
                            Id = new Guid("4c9faca3-d8db-48b7-90b8-04f327507e97"),
                            MultipleChoiceQuestionId = new Guid("30331739-eb68-451c-8b0a-ed5ac05e8227"),
                            Option = "thrown"
                        },
                        new
                        {
                            Id = new Guid("b6d60eab-4820-42be-8f33-4155af131ad3"),
                            MultipleChoiceQuestionId = new Guid("30331739-eb68-451c-8b0a-ed5ac05e8227"),
                            Option = "catch"
                        },
                        new
                        {
                            Id = new Guid("b20ee0b4-dcde-4f9e-bbf8-ef9617eed909"),
                            MultipleChoiceQuestionId = new Guid("dcec67bf-4aef-4676-b8b2-498380a4efa7"),
                            Option = "try"
                        },
                        new
                        {
                            Id = new Guid("e2606baf-96f6-4ddf-bf4d-6be5023cdb34"),
                            MultipleChoiceQuestionId = new Guid("dcec67bf-4aef-4676-b8b2-498380a4efa7"),
                            Option = "finally"
                        },
                        new
                        {
                            Id = new Guid("e70545cb-50a9-44e6-b413-c804af770a20"),
                            MultipleChoiceQuestionId = new Guid("dcec67bf-4aef-4676-b8b2-498380a4efa7"),
                            Option = "throw"
                        },
                        new
                        {
                            Id = new Guid("27a9da42-4aed-45bd-a64c-177ea6241802"),
                            MultipleChoiceQuestionId = new Guid("dcec67bf-4aef-4676-b8b2-498380a4efa7"),
                            Option = "catch"
                        },
                        new
                        {
                            Id = new Guid("7a3b0334-e88d-4dd7-be89-8e582c52d48d"),
                            MultipleChoiceQuestionId = new Guid("18db6f90-753e-4d55-aa6e-69db9cbb12eb"),
                            Option = "Compare To()"
                        },
                        new
                        {
                            Id = new Guid("9c7923c3-3383-451e-9990-ec15d652aa04"),
                            MultipleChoiceQuestionId = new Guid("18db6f90-753e-4d55-aa6e-69db9cbb12eb"),
                            Option = "Compare()"
                        },
                        new
                        {
                            Id = new Guid("a35a133a-19a3-4574-89ec-7e44fa97fe34"),
                            MultipleChoiceQuestionId = new Guid("18db6f90-753e-4d55-aa6e-69db9cbb12eb"),
                            Option = "Copy()"
                        },
                        new
                        {
                            Id = new Guid("c9aa4c04-1923-4a23-bff7-abdb9eba037c"),
                            MultipleChoiceQuestionId = new Guid("18db6f90-753e-4d55-aa6e-69db9cbb12eb"),
                            Option = "Concat()"
                        },
                        new
                        {
                            Id = new Guid("149d9a84-62a2-4dd9-b23e-d68d42618ff1"),
                            MultipleChoiceQuestionId = new Guid("9c66a8bd-de6f-47fb-a747-95b9b42c2055"),
                            Option = "Delegates can be used to implement callback notification"
                        },
                        new
                        {
                            Id = new Guid("f15e89b5-60e2-4457-bdc3-d4bb483834a2"),
                            MultipleChoiceQuestionId = new Guid("9c66a8bd-de6f-47fb-a747-95b9b42c2055"),
                            Option = "Delegates permit execution of a method on a secondary thread in an asynchronous manner"
                        },
                        new
                        {
                            Id = new Guid("3d0cfcaa-5ec7-4efc-8f27-261ea1bc9f87"),
                            MultipleChoiceQuestionId = new Guid("9c66a8bd-de6f-47fb-a747-95b9b42c2055"),
                            Option = "Delegate is a user defined type"
                        },
                        new
                        {
                            Id = new Guid("2df4a514-8123-4b39-96c0-21b9d362ce30"),
                            MultipleChoiceQuestionId = new Guid("9c66a8bd-de6f-47fb-a747-95b9b42c2055"),
                            Option = "All of the mentioned"
                        },
                        new
                        {
                            Id = new Guid("32eff30e-84a8-4f39-98ad-9299673dd821"),
                            MultipleChoiceQuestionId = new Guid("1f56e1ac-1bb7-4770-bab3-fb532b52e7cb"),
                            Option = "A single delegate can invoke more than one method"
                        },
                        new
                        {
                            Id = new Guid("a04723a5-d772-4c4d-83c1-afade549cf91"),
                            MultipleChoiceQuestionId = new Guid("1f56e1ac-1bb7-4770-bab3-fb532b52e7cb"),
                            Option = "Delegates could be shared"
                        },
                        new
                        {
                            Id = new Guid("11551fa3-ef2f-4ade-bd5e-d3efdcd5a3e2"),
                            MultipleChoiceQuestionId = new Guid("1f56e1ac-1bb7-4770-bab3-fb532b52e7cb"),
                            Option = "The del class will contain a one argument constructor and an invoke() method"
                        },
                        new
                        {
                            Id = new Guid("5e985fb6-b616-4f6e-9599-fe4d6448dbc7"),
                            MultipleChoiceQuestionId = new Guid("1f56e1ac-1bb7-4770-bab3-fb532b52e7cb"),
                            Option = "All of the mentioned"
                        });
                });

            modelBuilder.Entity("Survello.Models.Entites.MultipleChoiceQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultipleAnswer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("MultipleChoiceQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8e5a052-e9a9-4093-8b70-282016042413"),
                            Description = "Which keyword is used to refer baseclass constructor to subclass constructor?",
                            FormId = new Guid("433ae596-a2d7-4edd-9ca6-725e38d81d20"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = true,
                            QuestionNumber = 2
                        },
                        new
                        {
                            Id = new Guid("ae0d5c2a-8f4e-4827-bf5a-c0207058f073"),
                            Description = "In Inheritance concept, which of the following members of base class are accessible to derived class members?",
                            FormId = new Guid("433ae596-a2d7-4edd-9ca6-725e38d81d20"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = true,
                            QuestionNumber = 5
                        },
                        new
                        {
                            Id = new Guid("3b4f9812-6117-4e58-903f-490991e680b2"),
                            Description = "Which keyword is used for correct implementation of an interface in C#.NET?",
                            FormId = new Guid("52810e25-ff5a-4a0b-a3bb-149966936603"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 1
                        },
                        new
                        {
                            Id = new Guid("0f94f73d-67dc-4c79-b09c-89af701ffeda"),
                            Description = "Correct way to define operator method or to perform operator overloading is?",
                            FormId = new Guid("52810e25-ff5a-4a0b-a3bb-149966936603"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = true,
                            QuestionNumber = 3
                        },
                        new
                        {
                            Id = new Guid("30331739-eb68-451c-8b0a-ed5ac05e8227"),
                            Description = "Which of these keywords is not a part of exception handling?",
                            FormId = new Guid("54e3ce66-3f54-4887-a824-a8b5f3e2753d"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = true,
                            QuestionNumber = 2
                        },
                        new
                        {
                            Id = new Guid("dcec67bf-4aef-4676-b8b2-498380a4efa7"),
                            Description = "Which of these keywords must be used to monitor exceptions?",
                            FormId = new Guid("54e3ce66-3f54-4887-a824-a8b5f3e2753d"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 4
                        },
                        new
                        {
                            Id = new Guid("18db6f90-753e-4d55-aa6e-69db9cbb12eb"),
                            Description = "Which is the String method used to compare two strings with each other ?",
                            FormId = new Guid("03270740-b76c-4947-a9f6-8505c59a6af3"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 3
                        },
                        new
                        {
                            Id = new Guid("9c66a8bd-de6f-47fb-a747-95b9b42c2055"),
                            Description = "Which of the following are the correct statements about delegates?",
                            FormId = new Guid("19fe0d98-01a7-4f43-8fd5-c83e22660394"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 2
                        },
                        new
                        {
                            Id = new Guid("1f56e1ac-1bb7-4770-bab3-fb532b52e7cb"),
                            Description = "Which of the following is an incorrect statement about delegate?",
                            FormId = new Guid("ec3164af-7883-4df8-8db9-ebaf35160a52"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 2
                        });
                });

            modelBuilder.Entity("Survello.Models.Entites.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0989cb07-226e-430d-9173-87ee97472f6a"),
                            ConcurrencyStamp = "53a68973-89f5-40b4-a2e1-8efffbecc478",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Survello.Models.Entites.TextAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CorelationToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TextQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TextQuestionId");

                    b.ToTable("TextAnswers");
                });

            modelBuilder.Entity("Survello.Models.Entites.TextQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLongAnswer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("TextQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d8e3c85-ef71-472d-8444-a0af982736fd"),
                            Description = "What is C#?",
                            FormId = new Guid("433ae596-a2d7-4edd-9ca6-725e38d81d20"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            QuestionNumber = 1
                        },
                        new
                        {
                            Id = new Guid("828631cf-db6e-41a6-a81a-46c46f59b581"),
                            Description = "Explain types of comment in C# with examples",
                            FormId = new Guid("433ae596-a2d7-4edd-9ca6-725e38d81d20"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            QuestionNumber = 2
                        },
                        new
                        {
                            Id = new Guid("0fe8bf2a-b48f-480b-8ad5-c054c29b4566"),
                            Description = "Can multiple catch blocks be executed?",
                            FormId = new Guid("433ae596-a2d7-4edd-9ca6-725e38d81d20"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 4
                        },
                        new
                        {
                            Id = new Guid("0b447bc0-a9e0-4a51-bd34-781ac9478091"),
                            Description = "What is the difference between public, static, and void?",
                            FormId = new Guid("433ae596-a2d7-4edd-9ca6-725e38d81d20"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = true,
                            QuestionNumber = 6
                        },
                        new
                        {
                            Id = new Guid("29642fa8-57ab-4b35-9284-d556a81e6649"),
                            Description = "What is an object?",
                            FormId = new Guid("433ae596-a2d7-4edd-9ca6-725e38d81d20"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = true,
                            QuestionNumber = 7
                        },
                        new
                        {
                            Id = new Guid("0758f4a1-a33a-4d9b-b83c-52420f32f3a9"),
                            Description = "Define Constructors",
                            FormId = new Guid("52810e25-ff5a-4a0b-a3bb-149966936603"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = true,
                            QuestionNumber = 4
                        },
                        new
                        {
                            Id = new Guid("265bf076-045b-4125-a601-d021802d36f0"),
                            Description = "What is Jagged Arrays?",
                            FormId = new Guid("52810e25-ff5a-4a0b-a3bb-149966936603"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = true,
                            QuestionNumber = 5
                        },
                        new
                        {
                            Id = new Guid("f474eb25-71f4-44bc-a9e2-798b0075858d"),
                            Description = "What is the use of 'using' statement in C#?",
                            FormId = new Guid("52810e25-ff5a-4a0b-a3bb-149966936603"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = true,
                            QuestionNumber = 6
                        },
                        new
                        {
                            Id = new Guid("81f10c0a-62d5-4921-8882-9e82c573aa87"),
                            Description = "Can we use \"this\" command within a static method?",
                            FormId = new Guid("52810e25-ff5a-4a0b-a3bb-149966936603"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 7
                        },
                        new
                        {
                            Id = new Guid("cc58d266-38c1-4634-829c-2800ad28d8b9"),
                            Description = "What is the difference between constants and read-only?",
                            FormId = new Guid("52810e25-ff5a-4a0b-a3bb-149966936603"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            QuestionNumber = 8
                        },
                        new
                        {
                            Id = new Guid("9438bc0d-2c47-409f-a3f7-0334d0240f2e"),
                            Description = "What is an interface class? Give one example of it",
                            FormId = new Guid("54e3ce66-3f54-4887-a824-a8b5f3e2753d"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            QuestionNumber = 1
                        },
                        new
                        {
                            Id = new Guid("a488d39b-ff77-4872-b00a-3c32a53f3e09"),
                            Description = "What are value types and reference types?",
                            FormId = new Guid("54e3ce66-3f54-4887-a824-a8b5f3e2753d"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 5
                        },
                        new
                        {
                            Id = new Guid("3c03d298-d567-4ee8-91ea-2b1ed6cda9c9"),
                            Description = "What are sealed classes in C#?",
                            FormId = new Guid("54e3ce66-3f54-4887-a824-a8b5f3e2753d"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            QuestionNumber = 6
                        },
                        new
                        {
                            Id = new Guid("adc438b9-6789-4ea0-a689-88a5130b3a1c"),
                            Description = "What is method overloading?",
                            FormId = new Guid("54e3ce66-3f54-4887-a824-a8b5f3e2753d"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = true,
                            QuestionNumber = 7
                        },
                        new
                        {
                            Id = new Guid("e1629f86-fc5a-4eb0-b670-dc6af6dee40e"),
                            Description = "�Can a private virtual method can be overridden?",
                            FormId = new Guid("54e3ce66-3f54-4887-a824-a8b5f3e2753d"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 8
                        },
                        new
                        {
                            Id = new Guid("2ffda5f1-1e63-42e6-b560-394a92968ad9"),
                            Description = "Describe the accessibility modifier \"protected internal\".",
                            FormId = new Guid("03270740-b76c-4947-a9f6-8505c59a6af3"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            QuestionNumber = 1
                        },
                        new
                        {
                            Id = new Guid("f840155f-5c38-47e8-b954-d71429f5ae72"),
                            Description = "What is the .NET framework?",
                            FormId = new Guid("03270740-b76c-4947-a9f6-8505c59a6af3"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 2
                        },
                        new
                        {
                            Id = new Guid("786a9b6d-94d5-4afd-bb68-1d729a7ae817"),
                            Description = "What is CLR?",
                            FormId = new Guid("03270740-b76c-4947-a9f6-8505c59a6af3"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = true,
                            QuestionNumber = 5
                        },
                        new
                        {
                            Id = new Guid("ce852ae2-426e-43b9-afa1-670d6d80ef0e"),
                            Description = "What do you know about JIT?",
                            FormId = new Guid("03270740-b76c-4947-a9f6-8505c59a6af3"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            QuestionNumber = 6
                        },
                        new
                        {
                            Id = new Guid("0d7be58a-bd72-459b-9322-d4c86b631a87"),
                            Description = "What are the different types of constructors in c#?",
                            FormId = new Guid("03270740-b76c-4947-a9f6-8505c59a6af3"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            QuestionNumber = 7
                        },
                        new
                        {
                            Id = new Guid("ef6ce506-b780-4d36-8043-03924225556c"),
                            Description = "What is caching?",
                            FormId = new Guid("19fe0d98-01a7-4f43-8fd5-c83e22660394"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = true,
                            QuestionNumber = 3
                        },
                        new
                        {
                            Id = new Guid("aab30de9-d16d-45a2-9012-dd122b6b1dfa"),
                            Description = "What is a garbage collector?",
                            FormId = new Guid("19fe0d98-01a7-4f43-8fd5-c83e22660394"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 4
                        });
                });

            modelBuilder.Entity("Survello.Models.Entites.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("52d02f62-14ac-4152-872c-08d7eb74f484"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "293bbe7a-2f81-40ac-9791-2549dae190f1",
                            CreatedOn = new DateTime(2020, 6, 8, 10, 13, 24, 641, DateTimeKind.Utc).AddTicks(1644),
                            Email = "nasko@survello.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NASKO",
                            NormalizedUserName = "NASKO",
                            PasswordHash = "AQAAAAEAACcQAAAAECZ1NjkrxNVXZh2QqNXalEaeTB65ALdZrS2xlANQtkiIuqVOneRu60eXk2bEsBhxWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "321E275DD1E24957A7781D42BB68293B",
                            TwoFactorEnabled = false,
                            UserName = "nasko"
                        },
                        new
                        {
                            Id = new Guid("22a2d89d-ee6e-4c94-e490-08d7eb6bae70"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e7749ea-d920-4a49-864f-668c7f0ff4c9",
                            CreatedOn = new DateTime(2020, 6, 8, 10, 13, 24, 712, DateTimeKind.Utc).AddTicks(4354),
                            Email = "yoanna@survello.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "YOANNA",
                            NormalizedUserName = "YOANNA",
                            PasswordHash = "AQAAAAEAACcQAAAAEMWjgaTccMipRBXVOqBkDDDd+HYuHvZkmoHntw2ye2WxTswYnNoDE3uhm0LEyR3dNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "431E275DD1E24957A7781D42BB68293B",
                            TwoFactorEnabled = false,
                            UserName = "yoanna"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Survello.Models.Entites.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Survello.Models.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Survello.Models.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Survello.Models.Entites.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survello.Models.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Survello.Models.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survello.Models.Entites.DocumentAnswer", b =>
                {
                    b.HasOne("Survello.Models.Entites.DocumentQuestion", "DocumentQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("DocumentQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survello.Models.Entites.DocumentQuestion", b =>
                {
                    b.HasOne("Survello.Models.Entites.Form", "Form")
                        .WithMany("DocumentQuestions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survello.Models.Entites.Form", b =>
                {
                    b.HasOne("Survello.Models.Entites.User", "User")
                        .WithMany("Forms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survello.Models.Entites.MultipleChoiceAnswer", b =>
                {
                    b.HasOne("Survello.Models.Entites.MultipleChoiceQuestion", "MultipleChoiceQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("MultipleChoiceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survello.Models.Entites.MultipleChoiceOption", b =>
                {
                    b.HasOne("Survello.Models.Entites.MultipleChoiceQuestion", "MultipleChoiceQuestion")
                        .WithMany("Options")
                        .HasForeignKey("MultipleChoiceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survello.Models.Entites.MultipleChoiceQuestion", b =>
                {
                    b.HasOne("Survello.Models.Entites.Form", "Form")
                        .WithMany("MultipleChoiceQuestions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survello.Models.Entites.TextAnswer", b =>
                {
                    b.HasOne("Survello.Models.Entites.TextQuestion", "TextQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("TextQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survello.Models.Entites.TextQuestion", b =>
                {
                    b.HasOne("Survello.Models.Entites.Form", "Form")
                        .WithMany("TextQuestions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
