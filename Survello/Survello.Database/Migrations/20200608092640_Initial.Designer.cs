// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Survello.Database;

namespace Survello.Database.Migrations
{
    [DbContext(typeof(SurvelloContext))]
    [Migration("20200608092640_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("52d02f62-14ac-4152-872c-08d7eb74f484"),
                            RoleId = new Guid("0989cb07-226e-430d-9173-87ee97472f6a")
                        },
                        new
                        {
                            UserId = new Guid("22a2d89d-ee6e-4c94-e490-08d7eb6bae70"),
                            RoleId = new Guid("0989cb07-226e-430d-9173-87ee97472f6a")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Survello.Models.Entites.DocumentAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CorelationToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DocumentQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentQuestionId");

                    b.ToTable("DocumentAnswers");
                });

            modelBuilder.Entity("Survello.Models.Entites.DocumentQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileNumberLimit")
                        .HasColumnType("int");

                    b.Property<int>("FileSize")
                        .HasColumnType("int");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("DocumentQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("390c1883-9d80-4ba6-8ca5-8ca64b7742ff"),
                            Description = "Write a C# method to total all the even numbers in an array of ints.",
                            FileNumberLimit = 2,
                            FileSize = 1,
                            FormId = new Guid("f0d58731-55c4-4d3f-8528-4efe1e2c2bf8"),
                            IsDeleted = false,
                            IsRequired = true,
                            QuestionNumber = 3
                        },
                        new
                        {
                            Id = new Guid("2b433b42-a90b-4bc5-9839-f497c9640344"),
                            Description = "Write a C# method to total all the even numbers in an array of ints.",
                            FileNumberLimit = 3,
                            FileSize = 1,
                            FormId = new Guid("ab7411e3-3188-4de0-9bae-c3292a0ccbaa"),
                            IsDeleted = false,
                            IsRequired = true,
                            QuestionNumber = 2
                        },
                        new
                        {
                            Id = new Guid("241056cb-9a29-49f3-82d3-937c9c3cd07a"),
                            Description = "Write a C# method to total all the even numbers in an array of ints.",
                            FileNumberLimit = 1,
                            FileSize = 1,
                            FormId = new Guid("1f1da997-9be3-49f8-bbe3-822f14a80555"),
                            IsDeleted = false,
                            IsRequired = true,
                            QuestionNumber = 3
                        },
                        new
                        {
                            Id = new Guid("f630607b-28b9-4fe6-ad5f-e297980e8fb2"),
                            Description = "Write a C# method to total all the even numbers in an array of ints.",
                            FileNumberLimit = 4,
                            FileSize = 1,
                            FormId = new Guid("1e3c4445-f658-4321-9486-385273e131fd"),
                            IsDeleted = false,
                            IsRequired = true,
                            QuestionNumber = 4
                        },
                        new
                        {
                            Id = new Guid("d005dd49-0bcc-482e-b76c-124cc6b2a595"),
                            Description = "Write a C# method to total all the even numbers in an array of ints.",
                            FileNumberLimit = 5,
                            FileSize = 1,
                            FormId = new Guid("a7712d14-552f-4f3f-8758-f1d640e1fe8d"),
                            IsDeleted = false,
                            IsRequired = true,
                            QuestionNumber = 1
                        },
                        new
                        {
                            Id = new Guid("3427db1a-57ca-4d6b-9bdc-4ffd2de41e8a"),
                            Description = "Write a C# method to total all the even numbers in an array of ints.",
                            FileNumberLimit = 7,
                            FileSize = 1,
                            FormId = new Guid("1ea70a30-5eed-4cbb-bbf2-71c6b6cd1cda"),
                            IsDeleted = false,
                            IsRequired = true,
                            QuestionNumber = 3
                        });
                });

            modelBuilder.Entity("Survello.Models.Entites.Form", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfFilledForms")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Forms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0d58731-55c4-4d3f-8528-4efe1e2c2bf8"),
                            CreatedOn = new DateTime(2020, 6, 8, 12, 26, 40, 21, DateTimeKind.Local).AddTicks(3412),
                            Description = "In this form you will find basic questions about c#.",
                            IsDeleted = false,
                            NumberOfFilledForms = 0,
                            Title = "Basic .Net questions",
                            UserId = new Guid("22a2d89d-ee6e-4c94-e490-08d7eb6bae70")
                        },
                        new
                        {
                            Id = new Guid("ab7411e3-3188-4de0-9bae-c3292a0ccbaa"),
                            CreatedOn = new DateTime(2020, 6, 8, 12, 26, 40, 24, DateTimeKind.Local).AddTicks(1928),
                            Description = "This quiz will walk you through some of the most common questions asked about c# during interviews.",
                            IsDeleted = false,
                            NumberOfFilledForms = 0,
                            Title = "Quiz of commonly asked questions",
                            UserId = new Guid("22a2d89d-ee6e-4c94-e490-08d7eb6bae70")
                        },
                        new
                        {
                            Id = new Guid("1f1da997-9be3-49f8-bbe3-822f14a80555"),
                            CreatedOn = new DateTime(2020, 6, 8, 12, 26, 40, 24, DateTimeKind.Local).AddTicks(2030),
                            Description = "This quiz will walk you through some of the most common questions asked about c# during interviews.",
                            IsDeleted = false,
                            NumberOfFilledForms = 0,
                            Title = ".Net Interview questions",
                            UserId = new Guid("22a2d89d-ee6e-4c94-e490-08d7eb6bae70")
                        },
                        new
                        {
                            Id = new Guid("1e3c4445-f658-4321-9486-385273e131fd"),
                            CreatedOn = new DateTime(2020, 6, 8, 12, 26, 40, 24, DateTimeKind.Local).AddTicks(2047),
                            Description = "A selection of commonly asked questions during interviews.",
                            IsDeleted = false,
                            NumberOfFilledForms = 0,
                            Title = ".Net Advanced questions",
                            UserId = new Guid("22a2d89d-ee6e-4c94-e490-08d7eb6bae70")
                        },
                        new
                        {
                            Id = new Guid("a7712d14-552f-4f3f-8758-f1d640e1fe8d"),
                            CreatedOn = new DateTime(2020, 6, 8, 12, 26, 40, 24, DateTimeKind.Local).AddTicks(2060),
                            Description = "Questions frequently asked during interviews for junior developer",
                            IsDeleted = false,
                            NumberOfFilledForms = 0,
                            Title = "Junior dev interview questions",
                            UserId = new Guid("22a2d89d-ee6e-4c94-e490-08d7eb6bae70")
                        },
                        new
                        {
                            Id = new Guid("1ea70a30-5eed-4cbb-bbf2-71c6b6cd1cda"),
                            CreatedOn = new DateTime(2020, 6, 8, 12, 26, 40, 24, DateTimeKind.Local).AddTicks(2075),
                            Description = "A collection of advanced questions",
                            IsDeleted = false,
                            NumberOfFilledForms = 0,
                            Title = "A collection of advanced questions",
                            UserId = new Guid("22a2d89d-ee6e-4c94-e490-08d7eb6bae70")
                        });
                });

            modelBuilder.Entity("Survello.Models.Entites.MultipleChoiceAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CorelationToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MultipleChoiceQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MultipleChoiceQuestionId");

                    b.ToTable("MultipleChoiceAnswers");
                });

            modelBuilder.Entity("Survello.Models.Entites.MultipleChoiceOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MultipleChoiceQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Option")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MultipleChoiceQuestionId");

                    b.ToTable("MultipleChoiceOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30a61e1f-a969-44c9-ad12-27677b0cf442"),
                            MultipleChoiceQuestionId = new Guid("aa77eae5-3c01-47dc-bbb9-b8fb2ed83486"),
                            Option = "This"
                        },
                        new
                        {
                            Id = new Guid("a4ff7082-a7f1-4f65-88e2-19d7cde8c07f"),
                            MultipleChoiceQuestionId = new Guid("aa77eae5-3c01-47dc-bbb9-b8fb2ed83486"),
                            Option = "static"
                        },
                        new
                        {
                            Id = new Guid("0c4ef4e0-0bd2-42fd-b971-e220dfd45c86"),
                            MultipleChoiceQuestionId = new Guid("aa77eae5-3c01-47dc-bbb9-b8fb2ed83486"),
                            Option = "�extend"
                        },
                        new
                        {
                            Id = new Guid("72294a58-3b27-4e3a-a21c-3d48f99bd0f9"),
                            MultipleChoiceQuestionId = new Guid("aa77eae5-3c01-47dc-bbb9-b8fb2ed83486"),
                            Option = "base"
                        },
                        new
                        {
                            Id = new Guid("4bfd92a7-ca4f-48f5-bb4b-68a5c4cb2db9"),
                            MultipleChoiceQuestionId = new Guid("e6ba6640-f27b-4e29-b310-3f98a776e244"),
                            Option = "�static"
                        },
                        new
                        {
                            Id = new Guid("1a18e769-8e32-4d1d-b2d4-f605896b3bf0"),
                            MultipleChoiceQuestionId = new Guid("e6ba6640-f27b-4e29-b310-3f98a776e244"),
                            Option = "protected"
                        },
                        new
                        {
                            Id = new Guid("c9317342-1232-4457-93d6-78b3e7389997"),
                            MultipleChoiceQuestionId = new Guid("e6ba6640-f27b-4e29-b310-3f98a776e244"),
                            Option = "private"
                        },
                        new
                        {
                            Id = new Guid("d89950e4-b55a-4bf0-9cfb-71b66b87f70e"),
                            MultipleChoiceQuestionId = new Guid("e6ba6640-f27b-4e29-b310-3f98a776e244"),
                            Option = "shared"
                        },
                        new
                        {
                            Id = new Guid("d3fa3e69-6b09-46bd-87d7-dbb83c82e23b"),
                            MultipleChoiceQuestionId = new Guid("a2cfb6b2-2e92-4329-ad0f-497d9ffc0f76"),
                            Option = "interface"
                        },
                        new
                        {
                            Id = new Guid("67e08c49-4062-453f-986e-4370c9e7a5ce"),
                            MultipleChoiceQuestionId = new Guid("a2cfb6b2-2e92-4329-ad0f-497d9ffc0f76"),
                            Option = "Interface"
                        },
                        new
                        {
                            Id = new Guid("0e77ad99-4f7e-432c-8e16-6d496946e63d"),
                            MultipleChoiceQuestionId = new Guid("a2cfb6b2-2e92-4329-ad0f-497d9ffc0f76"),
                            Option = "intf"
                        },
                        new
                        {
                            Id = new Guid("dc90d6f5-02ce-47a7-bd62-ccf42153b502"),
                            MultipleChoiceQuestionId = new Guid("a2cfb6b2-2e92-4329-ad0f-497d9ffc0f76"),
                            Option = "Intf"
                        },
                        new
                        {
                            Id = new Guid("7c82bb4a-2fd8-456e-908a-edbb4f8e61c5"),
                            MultipleChoiceQuestionId = new Guid("ab1b1b5f-389e-4d1c-ad3d-0d56235433fa"),
                            Option = "public static op(arglist) { }"
                        },
                        new
                        {
                            Id = new Guid("8907f9bd-ad34-4f70-8afc-b3ba1077a224"),
                            MultipleChoiceQuestionId = new Guid("ab1b1b5f-389e-4d1c-ad3d-0d56235433fa"),
                            Option = "public static retval op(arglist) { }"
                        },
                        new
                        {
                            Id = new Guid("eb2d9451-c2c2-4420-a887-7392781a925b"),
                            MultipleChoiceQuestionId = new Guid("ab1b1b5f-389e-4d1c-ad3d-0d56235433fa"),
                            Option = "public static retval operator op(arglist) { }"
                        },
                        new
                        {
                            Id = new Guid("b5976591-55e4-4a7f-9143-149abbcc6a6c"),
                            MultipleChoiceQuestionId = new Guid("ab1b1b5f-389e-4d1c-ad3d-0d56235433fa"),
                            Option = "All of the mentioned"
                        },
                        new
                        {
                            Id = new Guid("497fe24c-4ffd-4897-8766-77bbe971cddd"),
                            MultipleChoiceQuestionId = new Guid("3dd27c6d-0283-48a4-b59b-e390204c32cc"),
                            Option = "try"
                        },
                        new
                        {
                            Id = new Guid("1e9729cb-4952-4fd8-93fb-b982535b2558"),
                            MultipleChoiceQuestionId = new Guid("3dd27c6d-0283-48a4-b59b-e390204c32cc"),
                            Option = "finally"
                        },
                        new
                        {
                            Id = new Guid("c0a57b70-70ec-4cd1-a709-11d3e3c2eebe"),
                            MultipleChoiceQuestionId = new Guid("3dd27c6d-0283-48a4-b59b-e390204c32cc"),
                            Option = "thrown"
                        },
                        new
                        {
                            Id = new Guid("34872bc9-82dd-4212-92f7-402868c4aa3a"),
                            MultipleChoiceQuestionId = new Guid("3dd27c6d-0283-48a4-b59b-e390204c32cc"),
                            Option = "catch"
                        },
                        new
                        {
                            Id = new Guid("bdece55d-74ea-4457-8299-ec040acad325"),
                            MultipleChoiceQuestionId = new Guid("872255df-ab9b-4622-8cc4-48306bde6d77"),
                            Option = "�try"
                        },
                        new
                        {
                            Id = new Guid("66733d79-9886-49e2-88fb-0da0fe989c83"),
                            MultipleChoiceQuestionId = new Guid("872255df-ab9b-4622-8cc4-48306bde6d77"),
                            Option = "finally"
                        },
                        new
                        {
                            Id = new Guid("9b4d575b-794e-471f-9eeb-7a2ccf5a8ac8"),
                            MultipleChoiceQuestionId = new Guid("872255df-ab9b-4622-8cc4-48306bde6d77"),
                            Option = "throw"
                        },
                        new
                        {
                            Id = new Guid("f9737817-fc77-4624-b1b7-ab1945d60900"),
                            MultipleChoiceQuestionId = new Guid("872255df-ab9b-4622-8cc4-48306bde6d77"),
                            Option = "catch"
                        },
                        new
                        {
                            Id = new Guid("29950c72-bca5-4c8a-98c4-7f7c439a67ed"),
                            MultipleChoiceQuestionId = new Guid("38ea6935-bdd1-48b4-8ed5-c918658a05f1"),
                            Option = "�Compare To()"
                        },
                        new
                        {
                            Id = new Guid("188694a5-b5c8-49ca-8312-d4c8a47fe237"),
                            MultipleChoiceQuestionId = new Guid("38ea6935-bdd1-48b4-8ed5-c918658a05f1"),
                            Option = "Compare()"
                        },
                        new
                        {
                            Id = new Guid("59387642-1749-445e-930d-d8d7097d7283"),
                            MultipleChoiceQuestionId = new Guid("38ea6935-bdd1-48b4-8ed5-c918658a05f1"),
                            Option = "Copy()"
                        },
                        new
                        {
                            Id = new Guid("ecafd3d4-2508-4046-8f06-09395e76864a"),
                            MultipleChoiceQuestionId = new Guid("38ea6935-bdd1-48b4-8ed5-c918658a05f1"),
                            Option = "ConCat()"
                        },
                        new
                        {
                            Id = new Guid("c939e1bc-0fef-48a4-a6e4-8454a859a3b3"),
                            MultipleChoiceQuestionId = new Guid("afacb607-88c4-410b-b32b-fecbff3c20eb"),
                            Option = "Delegates can be used to implement callback notification"
                        },
                        new
                        {
                            Id = new Guid("05db646b-3697-4f3d-bd54-575b25238bae"),
                            MultipleChoiceQuestionId = new Guid("afacb607-88c4-410b-b32b-fecbff3c20eb"),
                            Option = "Delegates permit execution of a method on a secondary thread in an asynchronous manner"
                        },
                        new
                        {
                            Id = new Guid("b90cb79c-7bcb-4902-ad65-3cf16974db42"),
                            MultipleChoiceQuestionId = new Guid("afacb607-88c4-410b-b32b-fecbff3c20eb"),
                            Option = "Delegate is a user defined type"
                        },
                        new
                        {
                            Id = new Guid("071fc262-239b-478e-a68d-7fd4e35ee2a1"),
                            MultipleChoiceQuestionId = new Guid("afacb607-88c4-410b-b32b-fecbff3c20eb"),
                            Option = "All of the mentioned"
                        },
                        new
                        {
                            Id = new Guid("b2f10545-cc02-4524-b497-a72bf93a8209"),
                            MultipleChoiceQuestionId = new Guid("a8cfc13d-fd75-45c1-ab3f-19809f54d01e"),
                            Option = "A single delegate can invoke more than one method"
                        },
                        new
                        {
                            Id = new Guid("43b1c3e0-9403-4f12-8cec-d50a6a0a27e5"),
                            MultipleChoiceQuestionId = new Guid("a8cfc13d-fd75-45c1-ab3f-19809f54d01e"),
                            Option = "Delegates could be shared"
                        },
                        new
                        {
                            Id = new Guid("8bfe0ef8-dfe8-4fa4-a429-2b6fc6d3b93d"),
                            MultipleChoiceQuestionId = new Guid("a8cfc13d-fd75-45c1-ab3f-19809f54d01e"),
                            Option = "The del class will contain a one argument constructor and an invoke() method"
                        },
                        new
                        {
                            Id = new Guid("3e89a083-c7bf-40f4-9cef-0745796873b2"),
                            MultipleChoiceQuestionId = new Guid("a8cfc13d-fd75-45c1-ab3f-19809f54d01e"),
                            Option = "All of the mentioned"
                        });
                });

            modelBuilder.Entity("Survello.Models.Entites.MultipleChoiceQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMultipleAnswer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("MultipleChoiceQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa77eae5-3c01-47dc-bbb9-b8fb2ed83486"),
                            Description = "Which keyword is used to refer baseclass constructor to subclass constructor?",
                            FormId = new Guid("f0d58731-55c4-4d3f-8528-4efe1e2c2bf8"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = true,
                            QuestionNumber = 2
                        },
                        new
                        {
                            Id = new Guid("e6ba6640-f27b-4e29-b310-3f98a776e244"),
                            Description = "�In Inheritance concept, which of the following members of base class are accessible to derived class members?",
                            FormId = new Guid("f0d58731-55c4-4d3f-8528-4efe1e2c2bf8"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = true,
                            QuestionNumber = 5
                        },
                        new
                        {
                            Id = new Guid("a2cfb6b2-2e92-4329-ad0f-497d9ffc0f76"),
                            Description = "Which keyword is used for correct implementation of an interface in C#.NET?",
                            FormId = new Guid("ab7411e3-3188-4de0-9bae-c3292a0ccbaa"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 1
                        },
                        new
                        {
                            Id = new Guid("ab1b1b5f-389e-4d1c-ad3d-0d56235433fa"),
                            Description = "�Correct way to define operator method or to perform operator overloading is?",
                            FormId = new Guid("ab7411e3-3188-4de0-9bae-c3292a0ccbaa"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = true,
                            QuestionNumber = 3
                        },
                        new
                        {
                            Id = new Guid("3dd27c6d-0283-48a4-b59b-e390204c32cc"),
                            Description = "�Which of these keywords is not a part of exception handling?",
                            FormId = new Guid("1f1da997-9be3-49f8-bbe3-822f14a80555"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = true,
                            QuestionNumber = 2
                        },
                        new
                        {
                            Id = new Guid("872255df-ab9b-4622-8cc4-48306bde6d77"),
                            Description = "Which of these keywords must be used to monitor exceptions?",
                            FormId = new Guid("1f1da997-9be3-49f8-bbe3-822f14a80555"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 4
                        },
                        new
                        {
                            Id = new Guid("38ea6935-bdd1-48b4-8ed5-c918658a05f1"),
                            Description = "Which is the String method used to compare two strings with each other ?",
                            FormId = new Guid("1e3c4445-f658-4321-9486-385273e131fd"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 3
                        },
                        new
                        {
                            Id = new Guid("afacb607-88c4-410b-b32b-fecbff3c20eb"),
                            Description = "Which of the following are the correct statements about delegates?",
                            FormId = new Guid("a7712d14-552f-4f3f-8758-f1d640e1fe8d"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 2
                        },
                        new
                        {
                            Id = new Guid("a8cfc13d-fd75-45c1-ab3f-19809f54d01e"),
                            Description = "Which of the following is an incorrect statement about delegate?",
                            FormId = new Guid("1ea70a30-5eed-4cbb-bbf2-71c6b6cd1cda"),
                            IsDeleted = false,
                            IsMultipleAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 2
                        });
                });

            modelBuilder.Entity("Survello.Models.Entites.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0989cb07-226e-430d-9173-87ee97472f6a"),
                            ConcurrencyStamp = "001a076e-ef72-43ab-94d7-36af9e9a1ca0",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Survello.Models.Entites.TextAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CorelationToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TextQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TextQuestionId");

                    b.ToTable("TextAnswers");
                });

            modelBuilder.Entity("Survello.Models.Entites.TextQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLongAnswer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("TextQuestions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d3d0758f-fce5-4920-a9c9-880be810c4e2"),
                            Description = "What is C#?",
                            FormId = new Guid("f0d58731-55c4-4d3f-8528-4efe1e2c2bf8"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            QuestionNumber = 1
                        },
                        new
                        {
                            Id = new Guid("2fd754ec-80b1-4384-965a-c9bd1f838566"),
                            Description = "Explain types of comment in C# with examples",
                            FormId = new Guid("f0d58731-55c4-4d3f-8528-4efe1e2c2bf8"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            QuestionNumber = 2
                        },
                        new
                        {
                            Id = new Guid("632a1e5f-1eea-4811-99c3-0f42b09f9e86"),
                            Description = "Can multiple catch blocks be executed?",
                            FormId = new Guid("f0d58731-55c4-4d3f-8528-4efe1e2c2bf8"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 4
                        },
                        new
                        {
                            Id = new Guid("2d1a1e65-93ed-40c7-ad52-ceed884c0cf0"),
                            Description = "What is the difference between public, static, and void?",
                            FormId = new Guid("f0d58731-55c4-4d3f-8528-4efe1e2c2bf8"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = true,
                            QuestionNumber = 6
                        },
                        new
                        {
                            Id = new Guid("891b055f-8238-4cca-bf29-ceed6f324717"),
                            Description = "What is an object?",
                            FormId = new Guid("f0d58731-55c4-4d3f-8528-4efe1e2c2bf8"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = true,
                            QuestionNumber = 7
                        },
                        new
                        {
                            Id = new Guid("bd1fe1b5-0ab3-4639-acb5-e40bc5b9f927"),
                            Description = "Define Constructors",
                            FormId = new Guid("ab7411e3-3188-4de0-9bae-c3292a0ccbaa"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = true,
                            QuestionNumber = 4
                        },
                        new
                        {
                            Id = new Guid("c50ce009-ed7f-44da-b24f-dec75472dbb1"),
                            Description = "What is Jagged Arrays?",
                            FormId = new Guid("ab7411e3-3188-4de0-9bae-c3292a0ccbaa"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = true,
                            QuestionNumber = 5
                        },
                        new
                        {
                            Id = new Guid("7b568f9c-147e-4fe1-ab05-118d2a82ecad"),
                            Description = "What is the use of 'using' statement in C#?",
                            FormId = new Guid("ab7411e3-3188-4de0-9bae-c3292a0ccbaa"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = true,
                            QuestionNumber = 6
                        },
                        new
                        {
                            Id = new Guid("ec4a44b0-eae7-40a2-b5c2-981d9c94b897"),
                            Description = "Can we use \"this\" command within a static method?",
                            FormId = new Guid("ab7411e3-3188-4de0-9bae-c3292a0ccbaa"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 7
                        },
                        new
                        {
                            Id = new Guid("36c0dfce-32a2-4ddc-acbe-d94b198fdbc2"),
                            Description = "What is the difference between constants and read-only?",
                            FormId = new Guid("ab7411e3-3188-4de0-9bae-c3292a0ccbaa"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            QuestionNumber = 8
                        },
                        new
                        {
                            Id = new Guid("80f17d1a-525b-48cd-be01-83910e56705b"),
                            Description = "What is an interface class? Give one example of it",
                            FormId = new Guid("1f1da997-9be3-49f8-bbe3-822f14a80555"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            QuestionNumber = 1
                        },
                        new
                        {
                            Id = new Guid("451cc22f-2805-4d0b-9217-79e01bf19915"),
                            Description = "What are value types and reference types?",
                            FormId = new Guid("1f1da997-9be3-49f8-bbe3-822f14a80555"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 5
                        },
                        new
                        {
                            Id = new Guid("86cd11e3-938a-4cbe-8bb0-df52d57275bb"),
                            Description = "What are sealed classes in C#?",
                            FormId = new Guid("1f1da997-9be3-49f8-bbe3-822f14a80555"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            QuestionNumber = 6
                        },
                        new
                        {
                            Id = new Guid("d544ea9f-e4fd-454e-a007-a01453cb58dd"),
                            Description = "What is method overloading?",
                            FormId = new Guid("1f1da997-9be3-49f8-bbe3-822f14a80555"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = true,
                            QuestionNumber = 7
                        },
                        new
                        {
                            Id = new Guid("9d5b6e05-3a0d-4fe6-82c3-9b6d3d8f4050"),
                            Description = "�Can a private virtual method can be overridden?",
                            FormId = new Guid("1f1da997-9be3-49f8-bbe3-822f14a80555"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 8
                        },
                        new
                        {
                            Id = new Guid("1c4dd546-a0fb-4f1d-9914-14dfcddef1cb"),
                            Description = "Describe the accessibility modifier \"protected internal\".",
                            FormId = new Guid("1e3c4445-f658-4321-9486-385273e131fd"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            QuestionNumber = 1
                        },
                        new
                        {
                            Id = new Guid("ad356be6-3df4-41d9-9117-d2dc365789a4"),
                            Description = "What is the .NET framework?",
                            FormId = new Guid("1e3c4445-f658-4321-9486-385273e131fd"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 2
                        },
                        new
                        {
                            Id = new Guid("4148b1fb-d9bb-4a94-bf23-d01c22ffa3b7"),
                            Description = "What is CLR?",
                            FormId = new Guid("1e3c4445-f658-4321-9486-385273e131fd"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = true,
                            QuestionNumber = 5
                        },
                        new
                        {
                            Id = new Guid("b18f1886-5792-4e8d-9c88-59254178e90e"),
                            Description = "What do you know about JIT?",
                            FormId = new Guid("1e3c4445-f658-4321-9486-385273e131fd"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            QuestionNumber = 6
                        },
                        new
                        {
                            Id = new Guid("d601ece8-c046-4be2-9dcb-750a8c2ed069"),
                            Description = "What are the different types of constructors in c#?",
                            FormId = new Guid("1e3c4445-f658-4321-9486-385273e131fd"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = false,
                            QuestionNumber = 7
                        },
                        new
                        {
                            Id = new Guid("9e710922-1ddc-4bcb-b808-a2ae9b709b8d"),
                            Description = "What is caching?",
                            FormId = new Guid("a7712d14-552f-4f3f-8758-f1d640e1fe8d"),
                            IsDeleted = false,
                            IsLongAnswer = true,
                            IsRequired = true,
                            QuestionNumber = 3
                        },
                        new
                        {
                            Id = new Guid("7b6e3b53-a872-4756-9014-e393a51e77c6"),
                            Description = "What is a garbage collector?",
                            FormId = new Guid("a7712d14-552f-4f3f-8758-f1d640e1fe8d"),
                            IsDeleted = false,
                            IsLongAnswer = false,
                            IsRequired = false,
                            QuestionNumber = 4
                        });
                });

            modelBuilder.Entity("Survello.Models.Entites.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("52d02f62-14ac-4152-872c-08d7eb74f484"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0af1e5d-fe63-423a-b429-66510e26a244",
                            CreatedOn = new DateTime(2020, 6, 8, 9, 26, 40, 29, DateTimeKind.Utc).AddTicks(8328),
                            Email = "nasko@survello.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NASKO",
                            NormalizedUserName = "NASKO",
                            PasswordHash = "AQAAAAEAACcQAAAAEKpCBvZGu0QVaTgQUzo0taoqNBk2Q8GSD9LMsjjHxnaDDKf5i5yBCPJwssWMl+1DgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "321E275DD1E24957A7781D42BB68293B",
                            TwoFactorEnabled = false,
                            UserName = "nasko"
                        },
                        new
                        {
                            Id = new Guid("22a2d89d-ee6e-4c94-e490-08d7eb6bae70"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7708edea-1579-43a3-85ed-6321c7440e46",
                            CreatedOn = new DateTime(2020, 6, 8, 9, 26, 40, 44, DateTimeKind.Utc).AddTicks(8624),
                            Email = "yoanna@survello.com",
                            EmailConfirmed = false,
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "YOANNA",
                            NormalizedUserName = "YOANNA",
                            PasswordHash = "AQAAAAEAACcQAAAAEHWuWhGpzpV1vdef3FgC0z0wWOtjhSSSK9s8ADOdOOKV5BHLeSnbTuxDoA2UaxKvHQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "431E275DD1E24957A7781D42BB68293B",
                            TwoFactorEnabled = false,
                            UserName = "yoanna"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Survello.Models.Entites.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Survello.Models.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Survello.Models.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Survello.Models.Entites.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Survello.Models.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Survello.Models.Entites.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survello.Models.Entites.DocumentAnswer", b =>
                {
                    b.HasOne("Survello.Models.Entites.DocumentQuestion", "DocumentQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("DocumentQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survello.Models.Entites.DocumentQuestion", b =>
                {
                    b.HasOne("Survello.Models.Entites.Form", "Form")
                        .WithMany("DocumentQuestions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survello.Models.Entites.Form", b =>
                {
                    b.HasOne("Survello.Models.Entites.User", "User")
                        .WithMany("Forms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survello.Models.Entites.MultipleChoiceAnswer", b =>
                {
                    b.HasOne("Survello.Models.Entites.MultipleChoiceQuestion", "MultipleChoiceQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("MultipleChoiceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survello.Models.Entites.MultipleChoiceOption", b =>
                {
                    b.HasOne("Survello.Models.Entites.MultipleChoiceQuestion", "MultipleChoiceQuestion")
                        .WithMany("Options")
                        .HasForeignKey("MultipleChoiceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survello.Models.Entites.MultipleChoiceQuestion", b =>
                {
                    b.HasOne("Survello.Models.Entites.Form", "Form")
                        .WithMany("MultipleChoiceQuestions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survello.Models.Entites.TextAnswer", b =>
                {
                    b.HasOne("Survello.Models.Entites.TextQuestion", "TextQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("TextQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Survello.Models.Entites.TextQuestion", b =>
                {
                    b.HasOne("Survello.Models.Entites.Form", "Form")
                        .WithMany("TextQuestions")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
